// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Sow extends ethereum.Event {
  get params(): Sow__Params {
    return new Sow__Params(this);
  }
}

export class Sow__Params {
  _event: Sow;

  constructor(event: Sow) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get topcorns(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get pods(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FieldFacet__claimAndSowTopcornsInputClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class FieldFacet__claimAndSowTopcornsWithMinInputClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class FieldFacet extends ethereum.SmartContract {
  static bind(address: Address): FieldFacet {
    return new FieldFacet("FieldFacet", address);
  }

  claimAndSowTopcorns(
    amount: BigInt,
    claim: FieldFacet__claimAndSowTopcornsInputClaimStruct
  ): BigInt {
    let result = super.call(
      "claimAndSowTopcorns",
      "claimAndSowTopcorns(uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromTuple(claim)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimAndSowTopcorns(
    amount: BigInt,
    claim: FieldFacet__claimAndSowTopcornsInputClaimStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimAndSowTopcorns",
      "claimAndSowTopcorns(uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromTuple(claim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimAndSowTopcornsWithMin(
    amount: BigInt,
    minAmount: BigInt,
    claim: FieldFacet__claimAndSowTopcornsWithMinInputClaimStruct
  ): BigInt {
    let result = super.call(
      "claimAndSowTopcornsWithMin",
      "claimAndSowTopcornsWithMin(uint256,uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minAmount),
        ethereum.Value.fromTuple(claim)
      ]
    );

    return result[0].toBigInt();
  }

  try_claimAndSowTopcornsWithMin(
    amount: BigInt,
    minAmount: BigInt,
    claim: FieldFacet__claimAndSowTopcornsWithMinInputClaimStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimAndSowTopcornsWithMin",
      "claimAndSowTopcornsWithMin(uint256,uint256,(uint32[],uint32[],uint256[],bool,bool,uint256,uint256,bool)):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minAmount),
        ethereum.Value.fromTuple(claim)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  harvestableIndex(): BigInt {
    let result = super.call(
      "harvestableIndex",
      "harvestableIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_harvestableIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "harvestableIndex",
      "harvestableIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  harvestedIndex(): BigInt {
    let result = super.call("harvestedIndex", "harvestedIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_harvestedIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "harvestedIndex",
      "harvestedIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  plot(account: Address, plotId: BigInt): BigInt {
    let result = super.call("plot", "plot(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);

    return result[0].toBigInt();
  }

  try_plot(account: Address, plotId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("plot", "plot(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(plotId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  podIndex(): BigInt {
    let result = super.call("podIndex", "podIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_podIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("podIndex", "podIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sowTopcorns(amount: BigInt): BigInt {
    let result = super.call("sowTopcorns", "sowTopcorns(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_sowTopcorns(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sowTopcorns",
      "sowTopcorns(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sowTopcornsWithMin(amount: BigInt, minAmount: BigInt): BigInt {
    let result = super.call(
      "sowTopcornsWithMin",
      "sowTopcornsWithMin(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_sowTopcornsWithMin(
    amount: BigInt,
    minAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sowTopcornsWithMin",
      "sowTopcornsWithMin(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(minAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalHarvestable(): BigInt {
    let result = super.call(
      "totalHarvestable",
      "totalHarvestable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalHarvestable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalHarvestable",
      "totalHarvestable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPods(): BigInt {
    let result = super.call("totalPods", "totalPods():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalPods(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalPods", "totalPods():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSoil(): BigInt {
    let result = super.call("totalSoil", "totalSoil():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSoil(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSoil", "totalSoil():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnripenedPods(): BigInt {
    let result = super.call(
      "totalUnripenedPods",
      "totalUnripenedPods():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUnripenedPods(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnripenedPods",
      "totalUnripenedPods():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BuyAndSowTopcornsCall extends ethereum.Call {
  get inputs(): BuyAndSowTopcornsCall__Inputs {
    return new BuyAndSowTopcornsCall__Inputs(this);
  }

  get outputs(): BuyAndSowTopcornsCall__Outputs {
    return new BuyAndSowTopcornsCall__Outputs(this);
  }
}

export class BuyAndSowTopcornsCall__Inputs {
  _call: BuyAndSowTopcornsCall;

  constructor(call: BuyAndSowTopcornsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyAndSowTopcornsCall__Outputs {
  _call: BuyAndSowTopcornsCall;

  constructor(call: BuyAndSowTopcornsCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyAndSowTopcornsWithMinCall extends ethereum.Call {
  get inputs(): BuyAndSowTopcornsWithMinCall__Inputs {
    return new BuyAndSowTopcornsWithMinCall__Inputs(this);
  }

  get outputs(): BuyAndSowTopcornsWithMinCall__Outputs {
    return new BuyAndSowTopcornsWithMinCall__Outputs(this);
  }
}

export class BuyAndSowTopcornsWithMinCall__Inputs {
  _call: BuyAndSowTopcornsWithMinCall;

  constructor(call: BuyAndSowTopcornsWithMinCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyAndSowTopcornsWithMinCall__Outputs {
  _call: BuyAndSowTopcornsWithMinCall;

  constructor(call: BuyAndSowTopcornsWithMinCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimAndSowTopcornsCall extends ethereum.Call {
  get inputs(): ClaimAndSowTopcornsCall__Inputs {
    return new ClaimAndSowTopcornsCall__Inputs(this);
  }

  get outputs(): ClaimAndSowTopcornsCall__Outputs {
    return new ClaimAndSowTopcornsCall__Outputs(this);
  }
}

export class ClaimAndSowTopcornsCall__Inputs {
  _call: ClaimAndSowTopcornsCall;

  constructor(call: ClaimAndSowTopcornsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get claim(): ClaimAndSowTopcornsCallClaimStruct {
    return changetype<ClaimAndSowTopcornsCallClaimStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ClaimAndSowTopcornsCall__Outputs {
  _call: ClaimAndSowTopcornsCall;

  constructor(call: ClaimAndSowTopcornsCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimAndSowTopcornsCallClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndSowTopcornsWithMinCall extends ethereum.Call {
  get inputs(): ClaimAndSowTopcornsWithMinCall__Inputs {
    return new ClaimAndSowTopcornsWithMinCall__Inputs(this);
  }

  get outputs(): ClaimAndSowTopcornsWithMinCall__Outputs {
    return new ClaimAndSowTopcornsWithMinCall__Outputs(this);
  }
}

export class ClaimAndSowTopcornsWithMinCall__Inputs {
  _call: ClaimAndSowTopcornsWithMinCall;

  constructor(call: ClaimAndSowTopcornsWithMinCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get claim(): ClaimAndSowTopcornsWithMinCallClaimStruct {
    return changetype<ClaimAndSowTopcornsWithMinCallClaimStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class ClaimAndSowTopcornsWithMinCall__Outputs {
  _call: ClaimAndSowTopcornsWithMinCall;

  constructor(call: ClaimAndSowTopcornsWithMinCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimAndSowTopcornsWithMinCallClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimBuyAndSowTopcornsCall extends ethereum.Call {
  get inputs(): ClaimBuyAndSowTopcornsCall__Inputs {
    return new ClaimBuyAndSowTopcornsCall__Inputs(this);
  }

  get outputs(): ClaimBuyAndSowTopcornsCall__Outputs {
    return new ClaimBuyAndSowTopcornsCall__Outputs(this);
  }
}

export class ClaimBuyAndSowTopcornsCall__Inputs {
  _call: ClaimBuyAndSowTopcornsCall;

  constructor(call: ClaimBuyAndSowTopcornsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get claim(): ClaimBuyAndSowTopcornsCallClaimStruct {
    return changetype<ClaimBuyAndSowTopcornsCallClaimStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class ClaimBuyAndSowTopcornsCall__Outputs {
  _call: ClaimBuyAndSowTopcornsCall;

  constructor(call: ClaimBuyAndSowTopcornsCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimBuyAndSowTopcornsCallClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimBuyAndSowTopcornsWithMinCall extends ethereum.Call {
  get inputs(): ClaimBuyAndSowTopcornsWithMinCall__Inputs {
    return new ClaimBuyAndSowTopcornsWithMinCall__Inputs(this);
  }

  get outputs(): ClaimBuyAndSowTopcornsWithMinCall__Outputs {
    return new ClaimBuyAndSowTopcornsWithMinCall__Outputs(this);
  }
}

export class ClaimBuyAndSowTopcornsWithMinCall__Inputs {
  _call: ClaimBuyAndSowTopcornsWithMinCall;

  constructor(call: ClaimBuyAndSowTopcornsWithMinCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get claim(): ClaimBuyAndSowTopcornsWithMinCallClaimStruct {
    return changetype<ClaimBuyAndSowTopcornsWithMinCallClaimStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class ClaimBuyAndSowTopcornsWithMinCall__Outputs {
  _call: ClaimBuyAndSowTopcornsWithMinCall;

  constructor(call: ClaimBuyAndSowTopcornsWithMinCall) {
    this._call = call;
  }

  get pods(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimBuyAndSowTopcornsWithMinCallClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class SowTopcornsCall extends ethereum.Call {
  get inputs(): SowTopcornsCall__Inputs {
    return new SowTopcornsCall__Inputs(this);
  }

  get outputs(): SowTopcornsCall__Outputs {
    return new SowTopcornsCall__Outputs(this);
  }
}

export class SowTopcornsCall__Inputs {
  _call: SowTopcornsCall;

  constructor(call: SowTopcornsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SowTopcornsCall__Outputs {
  _call: SowTopcornsCall;

  constructor(call: SowTopcornsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SowTopcornsWithMinCall extends ethereum.Call {
  get inputs(): SowTopcornsWithMinCall__Inputs {
    return new SowTopcornsWithMinCall__Inputs(this);
  }

  get outputs(): SowTopcornsWithMinCall__Outputs {
    return new SowTopcornsWithMinCall__Outputs(this);
  }
}

export class SowTopcornsWithMinCall__Inputs {
  _call: SowTopcornsWithMinCall;

  constructor(call: SowTopcornsWithMinCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SowTopcornsWithMinCall__Outputs {
  _call: SowTopcornsWithMinCall;

  constructor(call: SowTopcornsWithMinCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
