// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Incentivization extends ethereum.Event {
  get params(): Incentivization__Params {
    return new Incentivization__Params(this);
  }
}

export class Incentivization__Params {
  _event: Incentivization;

  constructor(event: Incentivization) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get topcorns(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get incentive(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get feeInBnb(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PodRateSnapshot extends ethereum.Event {
  get params(): PodRateSnapshot__Params {
    return new PodRateSnapshot__Params(this);
  }
}

export class PodRateSnapshot__Params {
  _event: PodRateSnapshot;

  constructor(event: PodRateSnapshot) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get podRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SeasonOfPlenty extends ethereum.Event {
  get params(): SeasonOfPlenty__Params {
    return new SeasonOfPlenty__Params(this);
  }
}

export class SeasonOfPlenty__Params {
  _event: SeasonOfPlenty;

  constructor(event: SeasonOfPlenty) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bnb(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get harvestable(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SeasonSnapshot extends ethereum.Event {
  get params(): SeasonSnapshot__Params {
    return new SeasonSnapshot__Params(this);
  }
}

export class SeasonSnapshot__Params {
  _event: SeasonSnapshot;

  constructor(event: SeasonSnapshot) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get supply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get stalk(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get seeds(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get podIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get harvestableIndex(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get totalLiquidityUSD(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Sunrise extends ethereum.Event {
  get params(): Sunrise__Params {
    return new Sunrise__Params(this);
  }
}

export class Sunrise__Params {
  _event: Sunrise;

  constructor(event: Sunrise) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SupplyDecrease extends ethereum.Event {
  get params(): SupplyDecrease__Params {
    return new SupplyDecrease__Params(this);
  }
}

export class SupplyDecrease__Params {
  _event: SupplyDecrease;

  constructor(event: SupplyDecrease) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newSoil(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SupplyIncrease extends ethereum.Event {
  get params(): SupplyIncrease__Params {
    return new SupplyIncrease__Params(this);
  }
}

export class SupplyIncrease__Params {
  _event: SupplyIncrease;

  constructor(event: SupplyIncrease) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newHarvestable(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newSilo(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newSoil(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class SupplyNeutral extends ethereum.Event {
  get params(): SupplyNeutral__Params {
    return new SupplyNeutral__Params(this);
  }
}

export class SupplyNeutral__Params {
  _event: SupplyNeutral;

  constructor(event: SupplyNeutral) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newSoil(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WeatherChange extends ethereum.Event {
  get params(): WeatherChange__Params {
    return new WeatherChange__Params(this);
  }
}

export class WeatherChange__Params {
  _event: WeatherChange;

  constructor(event: WeatherChange) {
    this._event = event;
  }

  get season(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get caseId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get change(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get currentYield(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SeasonFacet__lockedReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class SeasonFacet__pegReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class SeasonFacet__rainResultValue0Struct extends ethereum.Tuple {
  get start(): BigInt {
    return this[0].toBigInt();
  }

  get raining(): boolean {
    return this[1].toBoolean();
  }

  get pods(): BigInt {
    return this[2].toBigInt();
  }

  get roots(): BigInt {
    return this[3].toBigInt();
  }
}

export class SeasonFacet__reservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class SeasonFacet__timeResultValue0Struct extends ethereum.Tuple {
  get current(): BigInt {
    return this[0].toBigInt();
  }

  get withdrawSeasons(): i32 {
    return this[1].toI32();
  }

  get start(): BigInt {
    return this[2].toBigInt();
  }

  get period(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get rewardMultiplier(): BigInt {
    return this[5].toBigInt();
  }

  get maxTimeMultiplier(): BigInt {
    return this[6].toBigInt();
  }

  get costSunrice(): BigInt {
    return this[7].toBigInt();
  }
}

export class SeasonFacet__weatherResultValue0Struct extends ethereum.Tuple {
  get startSoil(): BigInt {
    return this[0].toBigInt();
  }

  get lastDSoil(): BigInt {
    return this[1].toBigInt();
  }

  get lastSowTime(): BigInt {
    return this[2].toBigInt();
  }

  get nextSowTime(): BigInt {
    return this[3].toBigInt();
  }
}

export class SeasonFacet extends ethereum.SmartContract {
  static bind(address: Address): SeasonFacet {
    return new SeasonFacet("SeasonFacet", address);
  }

  lockedReserves(): SeasonFacet__lockedReservesResult {
    let result = super.call(
      "lockedReserves",
      "lockedReserves():(uint256,uint256)",
      []
    );

    return new SeasonFacet__lockedReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_lockedReserves(): ethereum.CallResult<SeasonFacet__lockedReservesResult> {
    let result = super.tryCall(
      "lockedReserves",
      "lockedReserves():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SeasonFacet__lockedReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  pair(): Address {
    let result = super.call("pair", "pair():(address)", []);

    return result[0].toAddress();
  }

  try_pair(): ethereum.CallResult<Address> {
    let result = super.tryCall("pair", "pair():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pegPair(): Address {
    let result = super.call("pegPair", "pegPair():(address)", []);

    return result[0].toAddress();
  }

  try_pegPair(): ethereum.CallResult<Address> {
    let result = super.tryCall("pegPair", "pegPair():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pegReserves(): SeasonFacet__pegReservesResult {
    let result = super.call(
      "pegReserves",
      "pegReserves():(uint256,uint256)",
      []
    );

    return new SeasonFacet__pegReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_pegReserves(): ethereum.CallResult<SeasonFacet__pegReservesResult> {
    let result = super.tryCall(
      "pegReserves",
      "pegReserves():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SeasonFacet__pegReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  rain(): SeasonFacet__rainResultValue0Struct {
    let result = super.call(
      "rain",
      "rain():((uint32,bool,uint256,uint256))",
      []
    );

    return changetype<SeasonFacet__rainResultValue0Struct>(result[0].toTuple());
  }

  try_rain(): ethereum.CallResult<SeasonFacet__rainResultValue0Struct> {
    let result = super.tryCall(
      "rain",
      "rain():((uint32,bool,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SeasonFacet__rainResultValue0Struct>(value[0].toTuple())
    );
  }

  reserves(): SeasonFacet__reservesResult {
    let result = super.call("reserves", "reserves():(uint256,uint256)", []);

    return new SeasonFacet__reservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_reserves(): ethereum.CallResult<SeasonFacet__reservesResult> {
    let result = super.tryCall("reserves", "reserves():(uint256,uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SeasonFacet__reservesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  season(): BigInt {
    let result = super.call("season", "season():(uint32)", []);

    return result[0].toBigInt();
  }

  try_season(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("season", "season():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seasonOfPlenty(_s: BigInt): BigInt {
    let result = super.call(
      "seasonOfPlenty",
      "seasonOfPlenty(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_s)]
    );

    return result[0].toBigInt();
  }

  try_seasonOfPlenty(_s: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seasonOfPlenty",
      "seasonOfPlenty(uint32):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_s)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seasonTime(): BigInt {
    let result = super.call("seasonTime", "seasonTime():(uint32)", []);

    return result[0].toBigInt();
  }

  try_seasonTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("seasonTime", "seasonTime():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  time(): SeasonFacet__timeResultValue0Struct {
    let result = super.call(
      "time",
      "time():((uint32,uint8,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<SeasonFacet__timeResultValue0Struct>(result[0].toTuple());
  }

  try_time(): ethereum.CallResult<SeasonFacet__timeResultValue0Struct> {
    let result = super.tryCall(
      "time",
      "time():((uint32,uint8,uint256,uint256,uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SeasonFacet__timeResultValue0Struct>(value[0].toTuple())
    );
  }

  topcorn(): Address {
    let result = super.call("topcorn", "topcorn():(address)", []);

    return result[0].toAddress();
  }

  try_topcorn(): ethereum.CallResult<Address> {
    let result = super.tryCall("topcorn", "topcorn():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  weather(): SeasonFacet__weatherResultValue0Struct {
    let result = super.call(
      "weather",
      "weather():((uint256,uint256,uint32,uint32))",
      []
    );

    return changetype<SeasonFacet__weatherResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_weather(): ethereum.CallResult<SeasonFacet__weatherResultValue0Struct> {
    let result = super.tryCall(
      "weather",
      "weather():((uint256,uint256,uint32,uint32))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SeasonFacet__weatherResultValue0Struct>(value[0].toTuple())
    );
  }

  withdrawSeasons(): i32 {
    let result = super.call("withdrawSeasons", "withdrawSeasons():(uint8)", []);

    return result[0].toI32();
  }

  try_withdrawSeasons(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "withdrawSeasons",
      "withdrawSeasons():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class SunriseCall extends ethereum.Call {
  get inputs(): SunriseCall__Inputs {
    return new SunriseCall__Inputs(this);
  }

  get outputs(): SunriseCall__Outputs {
    return new SunriseCall__Outputs(this);
  }
}

export class SunriseCall__Inputs {
  _call: SunriseCall;

  constructor(call: SunriseCall) {
    this._call = call;
  }
}

export class SunriseCall__Outputs {
  _call: SunriseCall;

  constructor(call: SunriseCall) {
    this._call = call;
  }
}
