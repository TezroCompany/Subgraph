// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LPDeposit extends ethereum.Event {
  get params(): LPDeposit__Params {
    return new LPDeposit__Params(this);
  }
}

export class LPDeposit__Params {
  _event: LPDeposit;

  constructor(event: LPDeposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seeds(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LPRemove extends ethereum.Event {
  get params(): LPRemove__Params {
    return new LPRemove__Params(this);
  }
}

export class LPRemove__Params {
  _event: LPRemove;

  constructor(event: LPRemove) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get crates(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get crateLP(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get lp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get stalkRemoved(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get seedsRemoved(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class TopcornRemove extends ethereum.Event {
  get params(): TopcornRemove__Params {
    return new TopcornRemove__Params(this);
  }
}

export class TopcornRemove__Params {
  _event: TopcornRemove;

  constructor(event: TopcornRemove) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get crates(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get crateTopcorns(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get topcorns(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get stalkRemoved(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get seedsRemoved(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ConvertFacet extends ethereum.SmartContract {
  static bind(address: Address): ConvertFacet {
    return new ConvertFacet("ConvertFacet", address);
  }

  lpToPeg(): BigInt {
    let result = super.call("lpToPeg", "lpToPeg():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lpToPeg(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lpToPeg", "lpToPeg():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  topcornsToPeg(): BigInt {
    let result = super.call("topcornsToPeg", "topcornsToPeg():(uint256)", []);

    return result[0].toBigInt();
  }

  try_topcornsToPeg(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "topcornsToPeg",
      "topcornsToPeg():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ClaimConvertAddAndDepositLPCall extends ethereum.Call {
  get inputs(): ClaimConvertAddAndDepositLPCall__Inputs {
    return new ClaimConvertAddAndDepositLPCall__Inputs(this);
  }

  get outputs(): ClaimConvertAddAndDepositLPCall__Outputs {
    return new ClaimConvertAddAndDepositLPCall__Outputs(this);
  }
}

export class ClaimConvertAddAndDepositLPCall__Inputs {
  _call: ClaimConvertAddAndDepositLPCall;

  constructor(call: ClaimConvertAddAndDepositLPCall) {
    this._call = call;
  }

  get lp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get al(): ClaimConvertAddAndDepositLPCallAlStruct {
    return changetype<ClaimConvertAddAndDepositLPCallAlStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get claim(): ClaimConvertAddAndDepositLPCallClaimStruct {
    return changetype<ClaimConvertAddAndDepositLPCallClaimStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class ClaimConvertAddAndDepositLPCall__Outputs {
  _call: ClaimConvertAddAndDepositLPCall;

  constructor(call: ClaimConvertAddAndDepositLPCall) {
    this._call = call;
  }
}

export class ClaimConvertAddAndDepositLPCallAlStruct extends ethereum.Tuple {
  get topcornAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minTopcornAmount(): BigInt {
    return this[1].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class ClaimConvertAddAndDepositLPCallClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ConvertAddAndDepositLPCall extends ethereum.Call {
  get inputs(): ConvertAddAndDepositLPCall__Inputs {
    return new ConvertAddAndDepositLPCall__Inputs(this);
  }

  get outputs(): ConvertAddAndDepositLPCall__Outputs {
    return new ConvertAddAndDepositLPCall__Outputs(this);
  }
}

export class ConvertAddAndDepositLPCall__Inputs {
  _call: ConvertAddAndDepositLPCall;

  constructor(call: ConvertAddAndDepositLPCall) {
    this._call = call;
  }

  get lp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get al(): ConvertAddAndDepositLPCallAlStruct {
    return changetype<ConvertAddAndDepositLPCallAlStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class ConvertAddAndDepositLPCall__Outputs {
  _call: ConvertAddAndDepositLPCall;

  constructor(call: ConvertAddAndDepositLPCall) {
    this._call = call;
  }
}

export class ConvertAddAndDepositLPCallAlStruct extends ethereum.Tuple {
  get topcornAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minTopcornAmount(): BigInt {
    return this[1].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class ConvertDepositedLPCall extends ethereum.Call {
  get inputs(): ConvertDepositedLPCall__Inputs {
    return new ConvertDepositedLPCall__Inputs(this);
  }

  get outputs(): ConvertDepositedLPCall__Outputs {
    return new ConvertDepositedLPCall__Outputs(this);
  }
}

export class ConvertDepositedLPCall__Inputs {
  _call: ConvertDepositedLPCall;

  constructor(call: ConvertDepositedLPCall) {
    this._call = call;
  }

  get lp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minTopcorns(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class ConvertDepositedLPCall__Outputs {
  _call: ConvertDepositedLPCall;

  constructor(call: ConvertDepositedLPCall) {
    this._call = call;
  }
}

export class ConvertDepositedTopcornsCall extends ethereum.Call {
  get inputs(): ConvertDepositedTopcornsCall__Inputs {
    return new ConvertDepositedTopcornsCall__Inputs(this);
  }

  get outputs(): ConvertDepositedTopcornsCall__Outputs {
    return new ConvertDepositedTopcornsCall__Outputs(this);
  }
}

export class ConvertDepositedTopcornsCall__Inputs {
  _call: ConvertDepositedTopcornsCall;

  constructor(call: ConvertDepositedTopcornsCall) {
    this._call = call;
  }

  get topcorns(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minLP(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class ConvertDepositedTopcornsCall__Outputs {
  _call: ConvertDepositedTopcornsCall;

  constructor(call: ConvertDepositedTopcornsCall) {
    this._call = call;
  }
}
