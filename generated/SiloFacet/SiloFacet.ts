// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SiloFacetLPDeposit extends ethereum.Event {
  get params(): SiloFacetLPDeposit__Params {
    return new SiloFacetLPDeposit__Params(this);
  }
}

export class SiloFacetLPDeposit__Params {
  _event: SiloFacetLPDeposit;

  constructor(event: SiloFacetLPDeposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get seeds(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SiloFacetLPRemove extends ethereum.Event {
  get params(): SiloFacetLPRemove__Params {
    return new SiloFacetLPRemove__Params(this);
  }
}

export class SiloFacetLPRemove__Params {
  _event: SiloFacetLPRemove;

  constructor(event: SiloFacetLPRemove) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get crates(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get crateLP(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get lp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get stalkRemoved(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get seedsRemoved(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LPWithdraw extends ethereum.Event {
  get params(): LPWithdraw__Params {
    return new LPWithdraw__Params(this);
  }
}

export class LPWithdraw__Params {
  _event: LPWithdraw;

  constructor(event: LPWithdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SiloFacetTopcornAllocation extends ethereum.Event {
  get params(): SiloFacetTopcornAllocation__Params {
    return new SiloFacetTopcornAllocation__Params(this);
  }
}

export class SiloFacetTopcornAllocation__Params {
  _event: SiloFacetTopcornAllocation;

  constructor(event: SiloFacetTopcornAllocation) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get topcorns(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TopcornDeposit extends ethereum.Event {
  get params(): TopcornDeposit__Params {
    return new TopcornDeposit__Params(this);
  }
}

export class TopcornDeposit__Params {
  _event: TopcornDeposit;

  constructor(event: TopcornDeposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get topcorns(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SiloFacetTopcornRemove extends ethereum.Event {
  get params(): SiloFacetTopcornRemove__Params {
    return new SiloFacetTopcornRemove__Params(this);
  }
}

export class SiloFacetTopcornRemove__Params {
  _event: SiloFacetTopcornRemove;

  constructor(event: SiloFacetTopcornRemove) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get crates(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get crateTopcorns(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get topcorns(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get stalkRemoved(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get seedsRemoved(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class TopcornWithdraw extends ethereum.Event {
  get params(): TopcornWithdraw__Params {
    return new TopcornWithdraw__Params(this);
  }
}

export class TopcornWithdraw__Params {
  _event: TopcornWithdraw;

  constructor(event: TopcornWithdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get season(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get topcorns(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SiloFacet__lpDepositResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class SiloFacet__seasonsOfPlentyResultValue0Struct extends ethereum.Tuple {
  get wbnb(): BigInt {
    return this[0].toBigInt();
  }

  get base(): BigInt {
    return this[1].toBigInt();
  }

  get last(): BigInt {
    return this[2].toBigInt();
  }
}

export class SiloFacet extends ethereum.SmartContract {
  static bind(address: Address): SiloFacet {
    return new SiloFacet("SiloFacet", address);
  }

  balanceOfBNB(account: Address): BigInt {
    let result = super.call("balanceOfBNB", "balanceOfBNB(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOfBNB(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfBNB",
      "balanceOfBNB(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfFarmableSeeds(account: Address): BigInt {
    let result = super.call(
      "balanceOfFarmableSeeds",
      "balanceOfFarmableSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfFarmableSeeds(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfFarmableSeeds",
      "balanceOfFarmableSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfFarmableStalk(account: Address): BigInt {
    let result = super.call(
      "balanceOfFarmableStalk",
      "balanceOfFarmableStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfFarmableStalk(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfFarmableStalk",
      "balanceOfFarmableStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfFarmableTopcorns(account: Address): BigInt {
    let result = super.call(
      "balanceOfFarmableTopcorns",
      "balanceOfFarmableTopcorns(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfFarmableTopcorns(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfFarmableTopcorns",
      "balanceOfFarmableTopcorns(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfFarmableTopcornsV3(account: Address, accountStalk: BigInt): BigInt {
    let result = super.call(
      "balanceOfFarmableTopcornsV3",
      "balanceOfFarmableTopcornsV3(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(accountStalk)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfFarmableTopcornsV3(
    account: Address,
    accountStalk: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfFarmableTopcornsV3",
      "balanceOfFarmableTopcornsV3(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(accountStalk)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfGrownStalk(account: Address): BigInt {
    let result = super.call(
      "balanceOfGrownStalk",
      "balanceOfGrownStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfGrownStalk(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfGrownStalk",
      "balanceOfGrownStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfPlentyBase(account: Address): BigInt {
    let result = super.call(
      "balanceOfPlentyBase",
      "balanceOfPlentyBase(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfPlentyBase(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfPlentyBase",
      "balanceOfPlentyBase(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfRainRoots(account: Address): BigInt {
    let result = super.call(
      "balanceOfRainRoots",
      "balanceOfRainRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfRainRoots(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfRainRoots",
      "balanceOfRainRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfRoots(account: Address): BigInt {
    let result = super.call(
      "balanceOfRoots",
      "balanceOfRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfRoots(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfRoots",
      "balanceOfRoots(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfSeeds(account: Address): BigInt {
    let result = super.call(
      "balanceOfSeeds",
      "balanceOfSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfSeeds(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfSeeds",
      "balanceOfSeeds(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfStalk(account: Address): BigInt {
    let result = super.call(
      "balanceOfStalk",
      "balanceOfStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_balanceOfStalk(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfStalk",
      "balanceOfStalk(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastSeasonOfPlenty(): BigInt {
    let result = super.call(
      "lastSeasonOfPlenty",
      "lastSeasonOfPlenty():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastSeasonOfPlenty(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastSeasonOfPlenty",
      "lastSeasonOfPlenty():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastUpdate(account: Address): BigInt {
    let result = super.call("lastUpdate", "lastUpdate(address):(uint32)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_lastUpdate(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastUpdate", "lastUpdate(address):(uint32)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpDeposit(account: Address, id: BigInt): SiloFacet__lpDepositResult {
    let result = super.call(
      "lpDeposit",
      "lpDeposit(address,uint32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return new SiloFacet__lpDepositResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_lpDeposit(
    account: Address,
    id: BigInt
  ): ethereum.CallResult<SiloFacet__lpDepositResult> {
    let result = super.tryCall(
      "lpDeposit",
      "lpDeposit(address,uint32):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SiloFacet__lpDepositResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  lpWithdrawal(account: Address, i: BigInt): BigInt {
    let result = super.call(
      "lpWithdrawal",
      "lpWithdrawal(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );

    return result[0].toBigInt();
  }

  try_lpWithdrawal(account: Address, i: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lpWithdrawal",
      "lpWithdrawal(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seasonsOfPlenty(): SiloFacet__seasonsOfPlentyResultValue0Struct {
    let result = super.call(
      "seasonsOfPlenty",
      "seasonsOfPlenty():((uint256,uint256,uint32))",
      []
    );

    return changetype<SiloFacet__seasonsOfPlentyResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_seasonsOfPlenty(): ethereum.CallResult<
    SiloFacet__seasonsOfPlentyResultValue0Struct
  > {
    let result = super.tryCall(
      "seasonsOfPlenty",
      "seasonsOfPlenty():((uint256,uint256,uint32))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SiloFacet__seasonsOfPlentyResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  topcornDeposit(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "topcornDeposit",
      "topcornDeposit(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_topcornDeposit(
    account: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "topcornDeposit",
      "topcornDeposit(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  topcornWithdrawal(account: Address, i: BigInt): BigInt {
    let result = super.call(
      "topcornWithdrawal",
      "topcornWithdrawal(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );

    return result[0].toBigInt();
  }

  try_topcornWithdrawal(
    account: Address,
    i: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "topcornWithdrawal",
      "topcornWithdrawal(address,uint32):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(i)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositedLP(): BigInt {
    let result = super.call(
      "totalDepositedLP",
      "totalDepositedLP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDepositedLP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositedLP",
      "totalDepositedLP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalDepositedTopcorns(): BigInt {
    let result = super.call(
      "totalDepositedTopcorns",
      "totalDepositedTopcorns():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDepositedTopcorns(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDepositedTopcorns",
      "totalDepositedTopcorns():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalFarmableTopcorns(): BigInt {
    let result = super.call(
      "totalFarmableTopcorns",
      "totalFarmableTopcorns():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalFarmableTopcorns(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalFarmableTopcorns",
      "totalFarmableTopcorns():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalRoots(): BigInt {
    let result = super.call("totalRoots", "totalRoots():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalRoots(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalRoots", "totalRoots():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSeeds(): BigInt {
    let result = super.call("totalSeeds", "totalSeeds():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSeeds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSeeds", "totalSeeds():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStalk(): BigInt {
    let result = super.call("totalStalk", "totalStalk():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalStalk(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalStalk", "totalStalk():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWithdrawnLP(): BigInt {
    let result = super.call(
      "totalWithdrawnLP",
      "totalWithdrawnLP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalWithdrawnLP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWithdrawnLP",
      "totalWithdrawnLP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWithdrawnTopcorns(): BigInt {
    let result = super.call(
      "totalWithdrawnTopcorns",
      "totalWithdrawnTopcorns():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalWithdrawnTopcorns(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWithdrawnTopcorns",
      "totalWithdrawnTopcorns():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wbnb(): Address {
    let result = super.call("wbnb", "wbnb():(address)", []);

    return result[0].toAddress();
  }

  try_wbnb(): ethereum.CallResult<Address> {
    let result = super.tryCall("wbnb", "wbnb():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddAndDepositLPCall extends ethereum.Call {
  get inputs(): AddAndDepositLPCall__Inputs {
    return new AddAndDepositLPCall__Inputs(this);
  }

  get outputs(): AddAndDepositLPCall__Outputs {
    return new AddAndDepositLPCall__Outputs(this);
  }
}

export class AddAndDepositLPCall__Inputs {
  _call: AddAndDepositLPCall;

  constructor(call: AddAndDepositLPCall) {
    this._call = call;
  }

  get lp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyTopcornAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get buyBNBAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get al(): AddAndDepositLPCallAlStruct {
    return changetype<AddAndDepositLPCallAlStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class AddAndDepositLPCall__Outputs {
  _call: AddAndDepositLPCall;

  constructor(call: AddAndDepositLPCall) {
    this._call = call;
  }
}

export class AddAndDepositLPCallAlStruct extends ethereum.Tuple {
  get topcornAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minTopcornAmount(): BigInt {
    return this[1].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class BuyAndDepositTopcornsCall extends ethereum.Call {
  get inputs(): BuyAndDepositTopcornsCall__Inputs {
    return new BuyAndDepositTopcornsCall__Inputs(this);
  }

  get outputs(): BuyAndDepositTopcornsCall__Outputs {
    return new BuyAndDepositTopcornsCall__Outputs(this);
  }
}

export class BuyAndDepositTopcornsCall__Inputs {
  _call: BuyAndDepositTopcornsCall;

  constructor(call: BuyAndDepositTopcornsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyAndDepositTopcornsCall__Outputs {
  _call: BuyAndDepositTopcornsCall;

  constructor(call: BuyAndDepositTopcornsCall) {
    this._call = call;
  }
}

export class ClaimAddAndDepositLPCall extends ethereum.Call {
  get inputs(): ClaimAddAndDepositLPCall__Inputs {
    return new ClaimAddAndDepositLPCall__Inputs(this);
  }

  get outputs(): ClaimAddAndDepositLPCall__Outputs {
    return new ClaimAddAndDepositLPCall__Outputs(this);
  }
}

export class ClaimAddAndDepositLPCall__Inputs {
  _call: ClaimAddAndDepositLPCall;

  constructor(call: ClaimAddAndDepositLPCall) {
    this._call = call;
  }

  get lp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyTopcornAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get buyBNBAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get al(): ClaimAddAndDepositLPCallAlStruct {
    return changetype<ClaimAddAndDepositLPCallAlStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }

  get claim(): ClaimAddAndDepositLPCallClaimStruct {
    return changetype<ClaimAddAndDepositLPCallClaimStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class ClaimAddAndDepositLPCall__Outputs {
  _call: ClaimAddAndDepositLPCall;

  constructor(call: ClaimAddAndDepositLPCall) {
    this._call = call;
  }
}

export class ClaimAddAndDepositLPCallAlStruct extends ethereum.Tuple {
  get topcornAmount(): BigInt {
    return this[0].toBigInt();
  }

  get minTopcornAmount(): BigInt {
    return this[1].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[2].toBigInt();
  }
}

export class ClaimAddAndDepositLPCallClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndDepositLPCall extends ethereum.Call {
  get inputs(): ClaimAndDepositLPCall__Inputs {
    return new ClaimAndDepositLPCall__Inputs(this);
  }

  get outputs(): ClaimAndDepositLPCall__Outputs {
    return new ClaimAndDepositLPCall__Outputs(this);
  }
}

export class ClaimAndDepositLPCall__Inputs {
  _call: ClaimAndDepositLPCall;

  constructor(call: ClaimAndDepositLPCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get claim(): ClaimAndDepositLPCallClaimStruct {
    return changetype<ClaimAndDepositLPCallClaimStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ClaimAndDepositLPCall__Outputs {
  _call: ClaimAndDepositLPCall;

  constructor(call: ClaimAndDepositLPCall) {
    this._call = call;
  }
}

export class ClaimAndDepositLPCallClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndDepositTopcornsCall extends ethereum.Call {
  get inputs(): ClaimAndDepositTopcornsCall__Inputs {
    return new ClaimAndDepositTopcornsCall__Inputs(this);
  }

  get outputs(): ClaimAndDepositTopcornsCall__Outputs {
    return new ClaimAndDepositTopcornsCall__Outputs(this);
  }
}

export class ClaimAndDepositTopcornsCall__Inputs {
  _call: ClaimAndDepositTopcornsCall;

  constructor(call: ClaimAndDepositTopcornsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get claim(): ClaimAndDepositTopcornsCallClaimStruct {
    return changetype<ClaimAndDepositTopcornsCallClaimStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ClaimAndDepositTopcornsCall__Outputs {
  _call: ClaimAndDepositTopcornsCall;

  constructor(call: ClaimAndDepositTopcornsCall) {
    this._call = call;
  }
}

export class ClaimAndDepositTopcornsCallClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndWithdrawLPCall extends ethereum.Call {
  get inputs(): ClaimAndWithdrawLPCall__Inputs {
    return new ClaimAndWithdrawLPCall__Inputs(this);
  }

  get outputs(): ClaimAndWithdrawLPCall__Outputs {
    return new ClaimAndWithdrawLPCall__Outputs(this);
  }
}

export class ClaimAndWithdrawLPCall__Inputs {
  _call: ClaimAndWithdrawLPCall;

  constructor(call: ClaimAndWithdrawLPCall) {
    this._call = call;
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get claim(): ClaimAndWithdrawLPCallClaimStruct {
    return changetype<ClaimAndWithdrawLPCallClaimStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class ClaimAndWithdrawLPCall__Outputs {
  _call: ClaimAndWithdrawLPCall;

  constructor(call: ClaimAndWithdrawLPCall) {
    this._call = call;
  }
}

export class ClaimAndWithdrawLPCallClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimAndWithdrawTopcornsCall extends ethereum.Call {
  get inputs(): ClaimAndWithdrawTopcornsCall__Inputs {
    return new ClaimAndWithdrawTopcornsCall__Inputs(this);
  }

  get outputs(): ClaimAndWithdrawTopcornsCall__Outputs {
    return new ClaimAndWithdrawTopcornsCall__Outputs(this);
  }
}

export class ClaimAndWithdrawTopcornsCall__Inputs {
  _call: ClaimAndWithdrawTopcornsCall;

  constructor(call: ClaimAndWithdrawTopcornsCall) {
    this._call = call;
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get claim(): ClaimAndWithdrawTopcornsCallClaimStruct {
    return changetype<ClaimAndWithdrawTopcornsCallClaimStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class ClaimAndWithdrawTopcornsCall__Outputs {
  _call: ClaimAndWithdrawTopcornsCall;

  constructor(call: ClaimAndWithdrawTopcornsCall) {
    this._call = call;
  }
}

export class ClaimAndWithdrawTopcornsCallClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class ClaimBuyAndDepositTopcornsCall extends ethereum.Call {
  get inputs(): ClaimBuyAndDepositTopcornsCall__Inputs {
    return new ClaimBuyAndDepositTopcornsCall__Inputs(this);
  }

  get outputs(): ClaimBuyAndDepositTopcornsCall__Outputs {
    return new ClaimBuyAndDepositTopcornsCall__Outputs(this);
  }
}

export class ClaimBuyAndDepositTopcornsCall__Inputs {
  _call: ClaimBuyAndDepositTopcornsCall;

  constructor(call: ClaimBuyAndDepositTopcornsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get claim(): ClaimBuyAndDepositTopcornsCallClaimStruct {
    return changetype<ClaimBuyAndDepositTopcornsCallClaimStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class ClaimBuyAndDepositTopcornsCall__Outputs {
  _call: ClaimBuyAndDepositTopcornsCall;

  constructor(call: ClaimBuyAndDepositTopcornsCall) {
    this._call = call;
  }
}

export class ClaimBuyAndDepositTopcornsCallClaimStruct extends ethereum.Tuple {
  get topcornWithdrawals(): Array<BigInt> {
    return this[0].toBigIntArray();
  }

  get lpWithdrawals(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get plots(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get claimBnb(): boolean {
    return this[3].toBoolean();
  }

  get convertLP(): boolean {
    return this[4].toBoolean();
  }

  get minTopcornAmount(): BigInt {
    return this[5].toBigInt();
  }

  get minBNBAmount(): BigInt {
    return this[6].toBigInt();
  }

  get toWallet(): boolean {
    return this[7].toBoolean();
  }
}

export class DepositLPCall extends ethereum.Call {
  get inputs(): DepositLPCall__Inputs {
    return new DepositLPCall__Inputs(this);
  }

  get outputs(): DepositLPCall__Outputs {
    return new DepositLPCall__Outputs(this);
  }
}

export class DepositLPCall__Inputs {
  _call: DepositLPCall;

  constructor(call: DepositLPCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositLPCall__Outputs {
  _call: DepositLPCall;

  constructor(call: DepositLPCall) {
    this._call = call;
  }
}

export class DepositTopcornsCall extends ethereum.Call {
  get inputs(): DepositTopcornsCall__Inputs {
    return new DepositTopcornsCall__Inputs(this);
  }

  get outputs(): DepositTopcornsCall__Outputs {
    return new DepositTopcornsCall__Outputs(this);
  }
}

export class DepositTopcornsCall__Inputs {
  _call: DepositTopcornsCall;

  constructor(call: DepositTopcornsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositTopcornsCall__Outputs {
  _call: DepositTopcornsCall;

  constructor(call: DepositTopcornsCall) {
    this._call = call;
  }
}

export class UpdateSiloCall extends ethereum.Call {
  get inputs(): UpdateSiloCall__Inputs {
    return new UpdateSiloCall__Inputs(this);
  }

  get outputs(): UpdateSiloCall__Outputs {
    return new UpdateSiloCall__Outputs(this);
  }
}

export class UpdateSiloCall__Inputs {
  _call: UpdateSiloCall;

  constructor(call: UpdateSiloCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateSiloCall__Outputs {
  _call: UpdateSiloCall;

  constructor(call: UpdateSiloCall) {
    this._call = call;
  }
}

export class WithdrawLPCall extends ethereum.Call {
  get inputs(): WithdrawLPCall__Inputs {
    return new WithdrawLPCall__Inputs(this);
  }

  get outputs(): WithdrawLPCall__Outputs {
    return new WithdrawLPCall__Outputs(this);
  }
}

export class WithdrawLPCall__Inputs {
  _call: WithdrawLPCall;

  constructor(call: WithdrawLPCall) {
    this._call = call;
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawLPCall__Outputs {
  _call: WithdrawLPCall;

  constructor(call: WithdrawLPCall) {
    this._call = call;
  }
}

export class WithdrawTopcornsCall extends ethereum.Call {
  get inputs(): WithdrawTopcornsCall__Inputs {
    return new WithdrawTopcornsCall__Inputs(this);
  }

  get outputs(): WithdrawTopcornsCall__Outputs {
    return new WithdrawTopcornsCall__Outputs(this);
  }
}

export class WithdrawTopcornsCall__Inputs {
  _call: WithdrawTopcornsCall;

  constructor(call: WithdrawTopcornsCall) {
    this._call = call;
  }

  get crates(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawTopcornsCall__Outputs {
  _call: WithdrawTopcornsCall;

  constructor(call: WithdrawTopcornsCall) {
    this._call = call;
  }
}
